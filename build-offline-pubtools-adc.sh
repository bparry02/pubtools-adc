#!/bin/bash
#
# Generated by Claude 4 Sonnet
#
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR=".venv"
OFFLINE_DIR="offline-pubtools-adc"
DIST_DIR="${OFFLINE_DIR}/dist"
TARBALL_OUTPUT_DIR="dist/offline"
VERSION=$(grep "version=" setup.py | sed 's/.*version="\([^"]*\)".*/\1/')
TARBALL_NAME="pubtools-adc-offline-${VERSION}.tar.gz"
TARBALL_PATH="${TARBALL_OUTPUT_DIR}/${TARBALL_NAME}"

echo -e "${BLUE}ðŸ”§ Building pubtools-adc Offline Package${NC}"
echo -e "${BLUE}======================================${NC}"
echo "Version: $VERSION"
echo "Offline directory: $OFFLINE_DIR"
echo "Distribution directory: $DIST_DIR"
echo "Output directory: $TARBALL_OUTPUT_DIR"
echo "Output tarball: $TARBALL_PATH"
echo

# Function to print status
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if offline directory exists
if [[ ! -d "$OFFLINE_DIR" ]]; then
    print_error "Offline directory not found: $OFFLINE_DIR"
    echo "This directory should contain the install-offline.sh and README.md files."
    echo "Please ensure the offline-pubtools-adc directory exists in the project."
    exit 1
fi

# Check if required files exist
if [[ ! -f "$OFFLINE_DIR/install-offline.sh" ]]; then
    print_error "Missing required file: $OFFLINE_DIR/install-offline.sh"
    exit 1
fi

if [[ ! -f "$OFFLINE_DIR/README.md" ]]; then
    print_error "Missing required file: $OFFLINE_DIR/README.md"
    exit 1
fi

print_status "Found existing offline package directory with required files"

# Check if virtual environment exists and is activated
if [[ "$VIRTUAL_ENV" == "" ]]; then
    if [[ -d "$VENV_DIR" ]]; then
        print_status "Activating existing virtual environment..."
        source "$VENV_DIR/bin/activate"
    else
        print_error "No virtual environment found. Please create one first:"
        echo "  python3 -m venv $VENV_DIR"
        echo "  source $VENV_DIR/bin/activate"
        echo "  pip install -e ."
        exit 1
    fi
else
    print_status "Using existing virtual environment: $VIRTUAL_ENV"
fi

# Clean up previous build if it exists
if [[ -d "$DIST_DIR" ]]; then
    print_warning "Cleaning existing distribution directory..."
    rm -rf "$DIST_DIR"/*
fi

print_status "Creating distribution directory..."
mkdir -p "$DIST_DIR"

if [[ -f "$TARBALL_PATH" ]]; then
    print_warning "Removing existing $TARBALL_PATH..."
    rm -f "$TARBALL_PATH"
fi

# Install build dependencies if needed
print_status "Installing build dependencies..."
pip install -q build wheel

# Build the pubtools-adc wheel
print_status "Building pubtools-adc wheel..."
python -m build --wheel --outdir dist/ > /dev/null 2>&1

# Copy the built wheel to distribution directory
print_status "Copying pubtools-adc wheel to distribution directory..."
cp "dist/pubtools_adc-${VERSION}-py3-none-any.whl" "$DIST_DIR/"

# Download all dependency wheels
print_status "Downloading dependency wheels..."
echo "  This may take a few minutes..."
pip download -q -d "$DIST_DIR" -r requirements.in

# Convert any source distributions to wheels
print_status "Converting source distributions to wheels..."
for tarball in "$DIST_DIR"/*.tar.gz; do
    if [[ -f "$tarball" ]]; then
        echo "  Converting $(basename "$tarball")..."
        pip wheel -q --wheel-dir "$DIST_DIR" "$tarball"
        rm "$tarball"
    fi
done

# Count wheels
WHEEL_COUNT=$(ls "$DIST_DIR"/*.whl | wc -l)
print_status "Created $WHEEL_COUNT wheels in $DIST_DIR"

# Create the tarball
print_status "Creating tarball: $TARBALL_PATH..."
mkdir -p "$TARBALL_OUTPUT_DIR"
tar -czf "$TARBALL_PATH" "$OFFLINE_DIR/"

# Get final sizes
TARBALL_SIZE=$(du -h "$TARBALL_PATH" | cut -f1)
OFFLINE_SIZE=$(du -sh "$OFFLINE_DIR" | cut -f1)

echo
echo -e "${GREEN}ðŸŽ‰ Build Complete!${NC}"
echo -e "${GREEN}=================${NC}"
echo "âœ“ Offline package directory: $OFFLINE_DIR/ ($OFFLINE_SIZE)"
echo "âœ“ Distribution directory: $DIST_DIR/ ($WHEEL_COUNT wheels)"
echo "âœ“ Tarball created: $TARBALL_PATH ($TARBALL_SIZE)"
echo

echo -e "${BLUE}ðŸ“¦ Package Contents:${NC}"
echo "  - $WHEEL_COUNT pre-built wheels in dist/ directory"
echo "  - install-offline.sh (automated installer)"
echo "  - README.md (comprehensive documentation)"
echo

echo -e "${BLUE}ðŸš€ To deploy on target machine:${NC}"
echo "  1. Transfer: scp $TARBALL_PATH user@target:~/"
echo "  2. Extract: tar -xzf $TARBALL_NAME"
echo "  3. Install: cd $OFFLINE_DIR && ./install-offline.sh"
echo

echo -e "${BLUE}ðŸ§ª To test locally:${NC}"
echo "  cd $OFFLINE_DIR && ./install-offline.sh"
echo

echo -e "${GREEN}âœ… Ready for air-gapped deployment!${NC}"