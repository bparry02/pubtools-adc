#!/bin/bash
#
# Generated by Claude 4 Sonnet
#
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR=".venv-offline-build"
SOURCE_OFFLINE_DIR="offline-pubtools-adc"
BUILD_OFFLINE_DIR="build-offline"
PACKAGE_DIR="${BUILD_OFFLINE_DIR}/offline-pubtools-adc"
LIB_DIR="${PACKAGE_DIR}/lib"
TARBALL_OUTPUT_DIR="dist/offline"
# This script must be executed with python3.11 to match the target environment on bastion
TARGET_PYTHON_VERSION="py311"
PY_MODULE_VERSION=$(grep "version=" setup.py | sed 's/.*version="\([^"]*\)".*/\1/')
VERSION=$(git tag --sort=creatordate | grep -P '\d{4}-\d{2}-\d{2}' | tail -n1)

# Check if we got a valid version
if [[ -z "$VERSION" ]]; then
    print_error "Could not determine version from git tags"
    echo "No git tags found matching date pattern YYYY-MM-DD"
    echo "Please ensure git tags are available or create one:"
    echo "  git tag $(date +%Y-%m-%d)"
    exit 1
fi

TARBALL_NAME="pubtools-adc-offline-${TARGET_PYTHON_VERSION}-${VERSION}.tar.gz"
TARBALL_PATH="${TARBALL_OUTPUT_DIR}/${TARBALL_NAME}"

echo -e "${BLUE}ðŸ”§ Building pubtools-adc Offline Package${NC}"
echo -e "${BLUE}======================================${NC}"
echo "Version: $VERSION (from git tag)"
echo "Source offline directory: $SOURCE_OFFLINE_DIR"
echo "Build staging directory: $BUILD_OFFLINE_DIR"
echo "Package directory: $PACKAGE_DIR"
echo "Library directory: $LIB_DIR"
echo "Output directory: $TARBALL_OUTPUT_DIR"
echo "Output tarball: $TARBALL_PATH"
echo

# Check if virtual environment exists and is activated
if [[ "$VIRTUAL_ENV" == "" ]]; then
    if [[ -d "$VENV_DIR" ]]; then
        print_status "Activating existing virtual environment..."
        source "$VENV_DIR/bin/activate"
    else
        print_error "No virtual environment found. Please create one first:"
        echo "  python3 -m venv $VENV_DIR"
        echo "  source $VENV_DIR/bin/activate"
        exit 1
    fi
else
    print_status "Using existing virtual environment: $VIRTUAL_ENV"
fi

# Clean up previous build if it exists
if [[ -d "$BUILD_OFFLINE_DIR" ]]; then
    print_warning "Cleaning existing build directory..."
    rm -rf "$BUILD_OFFLINE_DIR"
fi

if [[ -f "dist/pubtools_adc*" ]]; then
    print_warning "Removing existing pubtools-adc wheel..."
    rm -f "dist/pubtools_adc*"
fi

if [[ -d "$TARBALL_OUTPUT_DIR" ]]; then
    print_warning "Removing existing $TARBALL_OUTPUT_DIR..."
    rm -rf "$TARBALL_OUTPUT_DIR"
fi

print_status "Creating build directory tree..."
mkdir -p "$LIB_DIR"

# Copy required files from source offline directory
print_status "Copying install script and documentation..."
cp "$SOURCE_OFFLINE_DIR/install-offline.sh" "$PACKAGE_DIR/"
cp "$SOURCE_OFFLINE_DIR/README.md" "$PACKAGE_DIR/"

# Install build dependencies if needed
print_status "Installing build dependencies..."
pip3 install -q build wheel

# Build the pubtools-adc wheel
print_status "Building pubtools-adc wheel..."
python -m build --wheel --outdir dist/ > /dev/null 2>&1

# Copy the built wheel to library directory
print_status "Copying pubtools-adc wheel to library directory..."
cp "dist/pubtools_adc-${PY_MODULE_VERSION}-py3-none-any.whl" "$LIB_DIR/"

# Download all dependency wheels
print_status "Downloading dependency wheels..."
echo "  This may take a few minutes..."
pip3 download -q -d "$LIB_DIR" -r requirements.txt

# Convert any source distributions to wheels
print_status "Converting source distributions to wheels..."
for tarball in "$LIB_DIR"/*.tar.gz; do
    if [[ -f "$tarball" ]]; then
        echo "  Converting $(basename "$tarball")..."
        pip3 wheel -q --wheel-dir "$LIB_DIR" "$tarball"
        rm "$tarball"
    fi
done

# Count wheels
WHEEL_COUNT=$(ls "$LIB_DIR"/*.whl | wc -l)
print_status "Created $WHEEL_COUNT wheels in $LIB_DIR"

# Create the tarball
print_status "Creating tarball: $TARBALL_PATH..."
mkdir -p "$TARBALL_OUTPUT_DIR"
# Change to build directory and tar just the offline-pubtools-adc subdirectory
cd "$BUILD_OFFLINE_DIR" && tar -czf "../$TARBALL_PATH" "offline-pubtools-adc/" && cd "$SCRIPT_DIR"

# Get final sizes
TARBALL_SIZE=$(du -h "$TARBALL_PATH" | cut -f1)
PACKAGE_SIZE=$(du -sh "$PACKAGE_DIR" | cut -f1)

echo
echo -e "${GREEN}ðŸŽ‰ Build Complete!${NC}"
echo -e "${GREEN}=================${NC}"
echo "âœ“ Package directory: $PACKAGE_DIR/ ($PACKAGE_SIZE)"
echo "âœ“ Library directory: $LIB_DIR/ ($WHEEL_COUNT wheels)"
echo "âœ“ Tarball created: $TARBALL_PATH ($TARBALL_SIZE)"
echo

echo -e "${BLUE}ðŸ“¦ Package Contents:${NC}"
echo "  - $WHEEL_COUNT pre-built wheels in lib/ directory"
echo "  - install-offline.sh (automated installer)"
echo "  - README.md (comprehensive documentation)"
echo

echo -e "${BLUE}ðŸš€ To deploy on target machine:${NC}"
echo "  1. Transfer: scp $TARBALL_PATH user@target:~/"
echo "  2. Extract: tar -xzf $TARBALL_NAME"
echo "  3. Install: cd offline-pubtools-adc && ./install-offline.sh"
echo

echo -e "${GREEN}âœ… Ready for air-gapped deployment!${NC}"